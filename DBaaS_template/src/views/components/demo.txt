<template>
  <div class="card">
    <div class="card-header pb-0">
      <h6> Users Info </h6>
      <div class="mb-3">
        <!-- <label for="userFilter" class="form-label">Filter Users:</label> -->
        <select v-model="selectedFilter" class="form-select" @change="filterUsers">
          <option value="all">All Users</option>
          <option value="local">Local Users</option>
          <option value="ad">AD Users</option>
        </select>
      </div>
    </div>
    
    <div v-if="loading" class="text-center mt-3">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <div v-else class="card-body px-0 pt-0 pb-2">
      <div v-if="users.length === 0" class="text-center">No Users are Available</div>
      <div v-else class="table-responsive p-0">
        <table class="table align-items-center mb-0">
          <thead>
            <tr>
              <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"> User Name  </th>
              <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"> Email Address
              </th>

              <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"> Created On
              </th>
              <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"> Last Login
              </th>
              <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7"> Status </th>

              

              <th class="text-secondary opacity-7"></th>
            </tr>
          </thead>
          <tbody>
            <!-- <tr v-for="user in users" :key="user.id"> -->
            <tr v-for="user in filteredUsers" :key="user.id">
              <!-- <tr v-for="(user, index) in users" :key="index"></tr> -->
              <td>
                <div class="d-flex px-2 py-1">
                  <div>
                    <img :src="this.$store.state.darkMode ||
      this.$store.state.sidebarType === 'bg-default'
      ? logoWhite
      : logo" class="avatar avatar-sm me-3" :alt="`user-avatar-${user.id}`" />
                  </div>
                  <div class="d-flex flex-column justify-content-center">
                    <!-- <h6 class="mb-0 text-sm">{{ user.id }}</h6> -->
                    <p class="text-secondary text-xs font-weight-bold">{{ user.username }}</p>
                  </div>
                </div>
              </td>
              <td class="align-middle text-center">
                <span class="text-secondary text-xs font-weight-bold">{{ user.email }}</span>
              </td>

              
              <td class="align-middle text-center">
                <span class="text-secondary text-xs font-weight-bold">{{ formatDate(user.date_joined) }}</span>
              </td>
              <td class="align-middle text-center">
                <span class="text-secondary text-xs font-weight-bold">{{ formatDate(user.last_login) }}</span>
              </td>

              <td class="align-middle text-center text-sm">
                <span v-if="!user.isActive" class="badge badge-sm bg-gradient-success">Active</span>
                <span v-else class="badge badge-sm bg-gradient-danger">Inactive</span>
              </td>
              <td class="align-middle">
                <button @click="toggleRoleVisibility(user)" type="button" class="ml-4 btn btn-link">
                  <i class="fas fa-eye"></i>
                </button>
                <div v-if="showUserRole && selectedUser === user" class="mt-2">
                  <!-- <label>Assigned Role:</label> -->
                  <p>{{ formattedRoles || 'No Role Assign' }}</p>
                </div>
              </td>
              
              <td class="align-middle">
                <!-- <argon-button color="success" size="md" variant="gradient" @click="prepareUserRole(user)" type="button"
                  class="ml-4 btn btn-danger" data-toggle="modal" data-target="#exampleModal2">
                  View Role
                </argon-button> -->
                <argon-button color="success" size="md" variant="gradient" @click="prepareAssignRoles(user)"
                  type="button" class="ml-4 btn btn-danger" data-toggle="modal" data-target="#exampleModal">
                  Assign Roles
                </argon-button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  <div class="modal fade" ref="myModal" id="exampleModal" tabindex="-1" role="dialog"
    aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content" :class="{ 'dark-mode': isDarkMode }">
        <div class="modal-header">
          <h2 class="modal-title" id="exampleModalLabel">Select Roles</h2>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>

        <!-- Inside your modal body -->
        <div class="form-check" v-for="role in roles" :key="role.name">
          <input v-model="selectedRoles" class="form-check-input" type="radio" :value="role.name"
            :id="'roleCheckbox_' + role.name">
          <label class="form-check-label" :for="'roleCheckbox_' + role.name">{{ role.name }}</label>
        </div>

        <div class="modal-footer">
          <argon-button color="secondary" size="md" variant="gradient" @click="isModalVisible = false" type="button"
            class="ml-4 btn btn-danger" data-toggle="modal" data-target="#exampleModal">
            Cancel
          </argon-button>
          <argon-button color="danger" size="md" variant="gradient" @click.prevent="assignRoles(user)" type="button"
            class="ml-4 btn btn-danger" data-toggle="modal" data-target="#exampleModal">
            Assign Roles
          </argon-button>
        </div>
      </div>
    </div>
  </div>


  <div class="modal fade" ref="myModal" id="exampleModal2" tabindex="-1" role="dialog"
    aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content" :class="{ 'dark-mode': isDarkMode }">
        <div class="modal-header">
          <h3 class="modal-title" id="exampleModalLabel">User Role</h3>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>

        <!-- Inside your modal body -->
        <!-- <div class="form-check" v-if="selectedUser">
          <label class="form-check-label">Username: {{ selectedUser.username }}</label><br>
          <label class="form-check-label">Assigned Role: {{ formattedRoles || 'No Role Assign' }}</label>
        </div>

        <div class="modal-footer">
          <argon-button color="secondary" size="md" variant="gradient" @click="isModalVisible = false" type="button"
            class="ml-4 btn btn-danger" data-toggle="modal" data-target="#exampleModal2">
            Close
          </argon-button>
        </div> -->
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";
import ArgonButton from "@/components/BB_Button.vue";
import { API_ENDPOINT } from '@/../apiconfig.js';
import logo from "@/assets/img/userTable.png";
import logoWhite from "@/assets/img/user.png";

export default {
  name: "users-table",
  components: {
    ArgonButton,
  },
  data() {
    return {
      selectedFilter: "all",
      apiUrl: API_ENDPOINT,
      users: [],
      isModalVisible: false,
      roles: [
        { id: 1, name: 'Admin' },
        { id: 2, name: 'Standard' },
        // Add more roles as needed
      ],
      selectedRoles: '', // Changed to a string
      selectedUser: null,
      loading: true,
      showUserRole: false,
      logo,
      logoWhite
    };
  },
  mounted() {
    this.fetchUsers();
  },
  computed: {
    isRoleSelected() {
      return this.selectedRoles !== '';
    },
    isDarkMode() {
      return this.$store.state.darkMode;
    },
    formattedRoles() {
      if (Array.isArray(this.selectedRoles)) {
        return this.selectedRoles.join(', ');
      }
      return ''; // or some default value if selectedRoles is not an array
    },
    filteredUsers() {
      if (this.selectedFilter === "local") {
        return this.users.filter(user => user.groups.includes(1));
      } else if (this.selectedFilter === "ad") {
        return this.users.filter(user => user.groups.length === 0);
      } else {
        return this.users; // Show all users
      }
    }
  },
  methods: {
    async fetchUsers() {
      try {
        const response = await axios.get(`${this.apiUrl}/api/v1/users/`);
        this.users = response.data;
        this.loading = false;
      } catch (error) {
        console.error('Error fetching users:', error);
        this.loading = false;
      }
    },
    filterUsers() {
      this.loading = true;
      this.fetchUsers();
    },
    formatDate(dateString) {
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return new Date(dateString).toLocaleDateString('en-US', options);
    },
    toggleRoleVisibility(user) {
      if (this.selectedUser === user) {
        this.showUserRole = !this.showUserRole; // Toggle visibility
        setTimeout(() => {
          this.showUserRole = false; // Hide role details after 5 seconds
        }, 5000);
      } else {
        this.selectedUser = user;
        this.showUserRole = true; // Show role details
        setTimeout(() => {
          this.showUserRole = false; // Hide role details after 5 seconds
        }, 5000);
      }
    },
    prepareAssignRoles(user) {
      this.selectedUser = user;
      this.selectedRoles = '';
      this.isModalVisible = true;
      // Call any additional logic needed to prepare roles
    },
    async assignRoles() {
      try {
        // Implement logic to assign roles to the selected user
        // Use this.selectedUser.id and this.selectedRoles
        // Example:
        // const response = await axios.post(`${this.apiUrl}/api/v1/assign_roles`, {
        //   userId: this.selectedUser.id,
        //   roles: this.selectedRoles.split(','),
        // });
        // Handle response as needed
        this.isModalVisible = false; // Close modal after assignment
      } catch (error) {
        console.error('Error assigning roles:', error);
      }
    },
  }
};
</script>

<style scoped>
.dark-mode {
  background-color: #1d1e52;
  color: #ffffff;
}
select.form-select {
  width: 150px; /* Set the desired width */
  font-size: 14px; /* Optional: Adjust font size */
  padding: 8px; /* Optional: Add padding */
  border-radius: 9px; /* Optional: Add rounded corners */
}
</style>